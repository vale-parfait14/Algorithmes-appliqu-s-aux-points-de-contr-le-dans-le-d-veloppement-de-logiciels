/*
function dijkstra(graph, start) {
    // Initialiser les distances à l'infini, sauf pour le sommet de départ
    const distances = {};
    const visited = new Set();
    const priorityQueue = new Set(Object.keys(graph));

    for (let node in graph) {
        distances[node] = Infinity;
    }
    distances[start] = 0;

    while (priorityQueue.size > 0) {
        // Trouver le nœud avec la distance la plus petite
        let minNode = null;
        priorityQueue.forEach(node => {
            if (minNode === null || distances[node] < distances[minNode]) {
                minNode = node;
            }
        });

        // Supprimer le nœud avec la distance la plus petite de la file de priorité
        priorityQueue.delete(minNode);

        // Mettre à jour les distances pour les voisins du nœud courant
        let neighbors = graph[minNode];
        for (let neighbor in neighbors) {
            if (!visited.has(neighbor)) {
                let newDist = distances[minNode] + neighbors[neighbor];
                if (newDist < distances[neighbor]) {
                    distances[neighbor] = newDist;
                }
            }
        }

        // Marquer le nœud comme visité
        visited.add(minNode);
    }

    return distances;
}

// Exemple d'utilisation
const graph = {
    'A': { 'B': 4, 'C': 2 },
    'B': { 'A': 4, 'C': 5, 'D': 10 },
    'C': { 'A': 2, 'B': 5, 'D': 3 },
    'D': { 'B': 10, 'C': 3 }
};

const startNode = 'A';
const shortestPaths = dijkstra(graph, startNode);
console.log(shortestPaths);

*/
